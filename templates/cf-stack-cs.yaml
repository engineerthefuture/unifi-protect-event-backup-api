AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a Cloudformation stack for the Unfi Protect Event Backup API.

# Stack-level tags
Metadata:
  AWS::CloudFormation::Interface:
    Tags:
      - Key: Owner
        Value: !Ref OwnerName
      - Key: Description
        Value: !Ref AppDescription
      - Key: Environment
        Value: !Ref EnvPrefix
      - Key: AppName
        Value: !Ref AppName

# Parameters
Parameters:
  AppName:
    Default: unifi-protect-event-backup-api
    Type: String
    Description: Name of the application
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  EnvPrefix:
    Default: dev
    Type: String
    Description: Prefix for the environment (dev, prod, staging)
    AllowedValues:
      - dev
      - prod
      - staging
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  BucketName:
    Type: String
    Description: Bucket name for Unifi Protect event backup API
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  BucketNameDeployment:
    Type: String
    Description: S3 bucket for Lambda deployments
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  FunctionName:
    Type: String
    Description: Lambda function to create.
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  RoleName:
    Type: String
    Description: Lambda function role to create.
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  OwnerName:
    Default: "Brent Foster"
    Type: String
    Description: Owner name
  AppDescription:
    Default: "Unifi webhook alarm event processing and backup API"
    Type: String
    Description: App description
  UnifiHost:
    Type: String
    Description: Unifi Protect hostname or IP address (e.g., udm.local, 192.168.1.1)
  UnifiUsername:
    Type: String
    Description: Unifi Protect username for video downloads
    NoEcho: true
  UnifiPassword:
    Type: String
    Description: Unifi Protect password for video downloads
    NoEcho: true
  DownloadDirectory:
    Type: String
    Description: Directory path for temporary video downloads (defaults to /tmp for Lambda compatibility)
    Default: "/tmp"
  ArchiveButtonX:
    Type: Number
    Description: X coordinate for archive button click in Unifi Protect UI
    Default: 1274
  ArchiveButtonY:
    Type: Number
    Description: Y coordinate for archive button click in Unifi Protect UI
    Default: 257
  DownloadButtonX:
    Type: Number
    Description: X coordinate for download button click in Unifi Protect UI
    Default: 1095
  DownloadButtonY:
    Type: Number
    Description: Y coordinate for download button click in Unifi Protect UI
    Default: 275
  ProcessingDelaySeconds:
    Type: Number
    Description: Delay in seconds before processing alarm events (default 2 minutes)
    Default: 120
    MinValue: 0
    MaxValue: 900
  SupportEmail:
    Type: String
    Description: Email address for support notifications
    Default: "support@example.com"
  BuildSha:
    Type: String
    Description: Git commit SHA for this build
    Default: "unknown"
  BuildTimestamp:
    Type: String
    Description: Timestamp when this build was created
    Default: "unknown"
    AllowedPattern: "^$|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"

# Resources
Resources: 
  # Role for API gateway logging
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-API-role"
  
  # Role associated with API gateway
  ApiGatewayAccountConfig:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - CloudWatchRole
        - Arn

  # Role for proxy lambda function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
              - apigateway.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
      Policies:
        - PolicyName: SQSAlarmProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                Resource: 
                  - !GetAtt AlarmProcessingQueue.Arn
                  - !GetAtt AlarmProcessingDeadLetterQueue.Arn
        - PolicyName: UnifiCredentialsSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref UnifiCredentialsSecret
      Path: /
      Tags: 
        - Key: "Name"
          Value: !Ref RoleName
      
  # S3 Bucket for storing uploaded files
  S3Bucket:
    Description: S3 bucket for alarm events.
    Type: AWS::S3::Bucket
    Properties:
            BucketName: !Sub "${BucketName}"
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true
            LifecycleConfiguration:
              Rules:
                - Id: DeleteAfter30Days
                  Status: Enabled
                  ExpirationInDays: 30
                  NoncurrentVersionExpirationInDays: 30
            Tags: 
              - Key: "Name"
                Value: !Sub "${BucketName}"

  # SQS Queue for delayed alarm processing
  AlarmProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-alarm-processing-queue"
      # DelaySeconds: 0  # Delay is configured per message, not per queue
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      VisibilityTimeout: 300  # 5 minutes (should exceed Lambda timeout)
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AlarmProcessingDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-alarm-processing-queue"
        - Key: "Purpose"
          Value: "Delayed alarm event processing"

  # Dead Letter Queue for failed alarm processing
  AlarmProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-alarm-processing-dlq"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-alarm-processing-dlq"
        - Key: "Purpose"
          Value: "Dead letter queue for failed alarm processing"

  # SQS Event Source Mapping for Lambda
  AlarmProcessingSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt AlarmProcessingQueue.Arn
      FunctionName: !Ref LambdaFunction
      BatchSize: 1  # Process one message at a time
      MaximumBatchingWindowInSeconds: 0  # Process immediately when available

  # Secrets Manager for Unifi Protect credentials
  UnifiCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${FunctionName}-unifi-credentials"
      Description: "Unifi Protect credentials for video downloads"
      SecretString: !Sub |
        {
          "hostname": "${UnifiHost}",
          "username": "${UnifiUsername}",
          "password": "${UnifiPassword}"
        }
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-unifi-credentials"
        - Key: "Purpose"
          Value: "Unifi Protect authentication credentials"

  # API gateway instance
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${FunctionName}-API"
      Description: !Sub "${EnvPrefix} - ${AppName} Proxy API"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags: 
        - Key: "Name"
          Value: !Sub "${FunctionName}-API"
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: '{proxy+}'
  
  # Root method
  ApiGatewayRootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: "CONVERT_TO_TEXT"

  # Proxy method for Post
  ApiGatewayProxyMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        CacheKeyParameters:
          - 'method.request.path.proxy'
        ContentHandling: "CONVERT_TO_TEXT"
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
  
  # Proxy method for Get
  ApiGatewayProxyMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        CacheKeyParameters:
          - 'method.request.path.proxy'
        ContentHandling: "CONVERT_TO_TEXT"
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true

  # Proxy method for Options
  ApiGatewayProxyMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        CacheKeyParameters:
          - 'method.request.path.proxy'
        ContentHandling: "CONVERT_TO_TEXT"
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true


  # API gateway deployment
  ApiGatewayDeployment:
    DependsOn:
      - ApiGatewayRootMethod
      - ApiGatewayProxyMethodGet
      - ApiGatewayProxyMethodPost
      - ApiGatewayProxyMethodOptions
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGateway

  # Enable logging of all HTTP requests
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: CloudWatchRole
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          DataTraceEnabled: true
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 2
      RestApiId: !Ref ApiGateway
      StageName: !Sub "${EnvPrefix}"

  # Proxy lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${FunctionName}"
      Code:
        S3Bucket: !Ref BucketNameDeployment
        S3Key: !Sub "${FunctionName}/publish.zip"
      Description: !Sub "${EnvPrefix} - ${AppName}"
              #AssemblyName::NameSpace.ClassName::FunctionHandlerName
      Handler: UnifiWebhookEventReceiver::UnifiWebhookEventReceiver.UnifiWebhookEventHandler::FunctionHandler
      MemorySize: 2056
      Timeout: 150
      Runtime: dotnet8
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          FunctionName: !Sub "${FunctionName}"
          DeployedEnv: !Sub "${EnvPrefix}"
          StorageBucket: !Sub "${BucketName}"
          ApiKey: !Sub "${ApiGatewayKey}"
          DevicePrefix: "DeviceMac"
          DeviceMac28704E113F64: "Backyard East"
          DeviceMacF4E2C67A2FE8: "Front"
          DeviceMac28704E113C44: "Side"
          DeviceMac28704E113F33: "Backyard West"
          DeviceMacF4E2C677E20F: "Door"
          UnifiCredentialsSecretArn: !Ref UnifiCredentialsSecret
          DownloadDirectory: !Ref DownloadDirectory
          ArchiveButtonX: !Ref ArchiveButtonX
          ArchiveButtonY: !Ref ArchiveButtonY
          DownloadButtonX: !Ref DownloadButtonX
          DownloadButtonY: !Ref DownloadButtonY
          AlarmProcessingQueueUrl: !Ref AlarmProcessingQueue
          AlarmProcessingDlqUrl: !Ref AlarmProcessingDeadLetterQueue
          ProcessingDelaySeconds: !Ref ProcessingDelaySeconds
          SupportEmail: !Ref SupportEmail
          BuildSha: !Ref BuildSha
          BuildTimestamp: !Ref BuildTimestamp
      Tags: 
        - Key: "FunctionName"
          Value: !Sub "${FunctionName}"

  # Root invoker from API gateway to lambda
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGateway
          - '/*/*/'
  
  # Proxy invoker from API gateway to lambda
  LambdaApiGatewayInvokeProxy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGateway
          - '/*/*/*'

  # API key
  ApiGatewayKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGateway
    Properties:
      Name: !Sub "${FunctionName}-ApiKey"
      Description: "API Key"
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Ref ApiGatewayStage

  # Usage plan key association
  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
      - ApiGateway
    Properties:
      KeyId: !Ref ApiGatewayKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Usage plan
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref ApiGatewayStage
      Description: !Sub "Usage Plan for ${FunctionName} API"
      Quota:
        Limit: 1000
        Period: DAY
      Throttle:
        BurstLimit: 5
        RateLimit: 2
      UsagePlanName: !Sub "${FunctionName}-plan"

# Output useful details
Outputs:
  Repository:
    Description: Source code repository
    Value: https://github.com/engineerthefuture/unifi-protect-event-backup-api
  POSTUnfiWebhookAlarmEventEndpoint:
    Description: POST endpoint for receiving alarm webhooks from Unifi Protect
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/alarmevent
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETLatestVideoEndpoint:
    Description: GET endpoint for downloading the most recent video file
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/latestvideo
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETEventDataEndpoint:
    Description: GET endpoint for retrieving stored alarm event data by eventKey
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/?eventKey={key}
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage