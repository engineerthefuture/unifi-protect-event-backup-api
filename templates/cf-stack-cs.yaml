AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a Cloudformation stack for the Unfi Protect Event Backup API.

# Stack-level tags
Metadata:
  AWS::CloudFormation::Interface:
    Tags:
      - Key: Owner
        Value: !Ref OwnerName
      - Key: Description
        Value: !Ref AppDescription
      - Key: Environment
        Value: !Ref EnvPrefix
      - Key: AppName
        Value: !Ref AppName
      - Key: SupportEmail
        Value: !Ref SupportEmail

# Parameters
# ...existing parameters...

# Resources
Resources:
  # SQS Queue for summary event processing
  SummaryEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-summary-event-queue"
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SummaryEventDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-summary-event-queue"
        - Key: "Purpose"
          Value: "Summary event processing"

  # Dead Letter Queue for summary event processing
  SummaryEventDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-summary-event-dlq"
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-summary-event-dlq"
        - Key: "Purpose"
          Value: "DLQ for summary event processing"

  # Summary Event Lambda Function
  SummaryEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "bf-${EnvPrefix}-lambda-summary-event"
      Code:
        S3Bucket: !Ref BucketNameDeployment
        S3Key: !Sub "bf-${EnvPrefix}-summary-event-lambda.zip"
      Description: !Sub "${EnvPrefix} - ${AppName} summary event processor"
      Handler: src/index.handler
      MemorySize: 256
      Timeout: 60
      Runtime: nodejs18.x
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SUMMARY_BUCKET_NAME: !Ref BucketName
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SummaryEventQueue.Arn
# ...other resources...

# Outputs
# ...existing outputs...
Outputs:
  ApiGateway:
    Description: "API Gateway RestApiId"
    Value: !Ref ApiGateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiGateway"
AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a Cloudformation stack for the Unfi Protect Event Backup API.

# Stack-level tags
Metadata:
  AWS::CloudFormation::Interface:
    Tags:
      - Key: Owner
        Value: !Ref OwnerName
      - Key: Description
        Value: !Ref AppDescription
      - Key: Environment
        Value: !Ref EnvPrefix
      - Key: AppName
        Value: !Ref AppName
      - Key: SupportEmail
        Value: !Ref SupportEmail

    
# Parameters
Parameters:
  UiApiKey:
    Type: String
    Description: API key for UI access (should be passed in from a secure source, e.g., GitHub secret)
    NoEcho: true
  RetentionDays:
    Type: Number
    Description: Number of days to retain event data in S3 and for API search.
    Default: 30
    MinValue: 1
  AppName:
    Default: unifi-protect-event-backup-api
    Type: String
    Description: Name of the application
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  EnvPrefix:
    Default: dev
    Type: String
    Description: Prefix for the environment (dev, prod, staging)
    AllowedValues:
      - dev
      - prod
      - staging
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  BucketName:
    Type: String
    Description: Bucket name for Unifi Protect event backup API
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  BucketNameDeployment:
    Type: String
    Description: S3 bucket for Lambda deployments
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  FunctionName:
    Type: String
    Description: Lambda function to create.
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  RoleName:
    Type: String
    Description: Lambda function role to create.
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  OwnerName:
    Default: "Brent Foster"
    Type: String
    Description: Owner name
  AppDescription:
    Default: "Unifi webhook alarm event processing and backup API"
    Type: String
    Description: App description
  UnifiHost:
    Type: String
    Description: Unifi Protect hostname or IP address (e.g., udm.local, 192.168.1.1)
  UnifiHostIp:
    Type: String
    Description: Unifi Protect IP address for DNS record (e.g., 192.168.1.1)
  UnifiUsername:
    Type: String
    Description: Unifi Protect username for video downloads
    NoEcho: true
  UnifiPassword:
    Type: String
    Description: Unifi Protect password for video downloads
    NoEcho: true
  UnifiApiKey:
    Type: String
    Description: Unifi Protect API key for metadata access
    NoEcho: true
  UnifiApiMetadataPath:
    Type: String
    Description: Unifi Protect API metadata endpoint path
    NoEcho: true
  DownloadDirectory:
    Type: String
    Description: Directory path for temporary video downloads (defaults to /tmp for Lambda compatibility)
    Default: "/tmp"
  ProcessingDelaySeconds:
    Type: Number
    Description: Delay in seconds before processing alarm events (default 2 minutes)
    Default: 120
    MinValue: 0
    MaxValue: 900
  SupportEmail:
    Type: String
    Description: Email address for support notifications
    Default: "support@example.com"
  BuildSha:
    Type: String
    Description: Git commit SHA for this build
    Default: "unknown"
  BuildTimestamp:
    Type: String
    Description: Timestamp when this build was created
    Default: "unknown"
  DeviceMetadata:
    Type: String
    Description: JSON configuration for device names, MAC addresses, and UI coordinates
    Default: "replaced from GitHub Actions variable"
  DomainName:
    Type: String
    Description: Custom domain name for the API Gateway (e.g., api.brentfoster.me)
    Default: ""
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for the domain (e.g., Z1D633PJN98FT9)
    Default: ""

# Conditions
Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]
  UseCustomDomain: !And [!Condition HasCustomDomain, !Condition HasHostedZone]
  HasUnifiHost: !Not [!Equals [!Ref UnifiHost, ""]]
  HasUnifiHostIp: !Not [!Equals [!Ref UnifiHostIp, ""]]
  UseUnifiDomain: !And [!And [!Condition HasUnifiHost, !Condition HasUnifiHostIp], !Condition HasHostedZone]
  HasHttpsPrefix: !Not [!Equals [!Select [0, !Split ["://", !Ref UnifiHost]], !Ref UnifiHost]]
  IsProdEnvironment: !Equals [!Ref EnvPrefix, "prod"]

# Resources
Resources: 
  # SQS Queue for summary event processing
  SummaryEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-summary-event-queue"
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SummaryEventDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-summary-event-queue"
        - Key: "Purpose"
          Value: "Summary event processing"

  # Dead Letter Queue for summary event processing
  SummaryEventDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-summary-event-dlq"
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-summary-event-dlq"
        - Key: "Purpose"
          Value: "DLQ for summary event processing"

  # Inline Node.js Lambda for summary event processing
  SummaryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${FunctionName}-summary-processor"
      Description: "Processes summary events from the summary event SQS queue."
      Handler: index.handler
      Role: !GetAtt SummaryLambdaRole.Arn
      Runtime: nodejs20.x
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          SUMMARY_EVENT_QUEUE_URL: !Ref SummaryEventQueue
          SUMMARY_EVENT_DLQ_URL: !Ref SummaryEventDeadLetterQueue
      Code:
        ZipFile: |
          // Simple Node.js Lambda handler for summary event processing
          exports.handler = async (event, context) => {
            console.log('Received event:', JSON.stringify(event));
            for (const record of event.Records) {
              try {
                const body = JSON.parse(record.body);
                // TODO: Implement summary event processing logic here
                console.log('Processing summary event:', body);
              } catch (err) {
                console.error('Error processing record:', err);
                throw err;
              }
            }
            return {};
          };

  # IAM Role for SummaryLambdaFunction
  SummaryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-summary-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
      Policies:
        - PolicyName: SQSSummaryEventPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource:
                  - !GetAtt SummaryEventQueue.Arn
                  - !GetAtt SummaryEventDeadLetterQueue.Arn
      Path: /
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-summary-lambda-role"

  # Event source mapping for SummaryLambdaFunction
  SummaryEventSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SummaryEventQueue.Arn
      FunctionName: !Ref SummaryLambdaFunction
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 0

  # Allow main Lambda to send messages to summary event queue
  LambdaSummaryEventSQSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaSummaryEventSQSPolicy
      Roles:
        - !Ref RoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt SummaryEventQueue.Arn
              - !GetAtt SummaryEventDeadLetterQueue.Arn
  # OPTIONS method for {proxy+} with CORS headers
  ApiGatewayProxyOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # SSL Certificate for Custom Domain
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-cert"
        - Key: "Environment"
          Value: !Ref EnvPrefix
        - Key: "Purpose"
          Value: "API Gateway Custom Domain SSL Certificate"

  # SSL Certificate for UniFi Domain
  UnifiCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseUnifiDomain
    Properties:
      DomainName: !If
        - HasHttpsPrefix
        - !Select [2, !Split ["/", !Ref UnifiHost]]
        - !Ref UnifiHost
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If
            - HasHttpsPrefix
            - !Select [2, !Split ["/", !Ref UnifiHost]]
            - !Ref UnifiHost
          HostedZoneId: !Ref HostedZoneId
      CertificateExport:
        Fn::If:
          - IsProdEnvironment
          - DISABLED
          - DISABLED
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-unifi-cert"
        - Key: "Environment"
          Value: !Ref EnvPrefix
        - Key: "Purpose"
          Value: "UniFi Protect SSL Certificate"

  # Role for API gateway logging
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-API-role"
  
  # Role associated with API gateway
  ApiGatewayAccountConfig:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  # Role for proxy lambda function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
              - apigateway.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
      Policies:
        - PolicyName: SQSAlarmProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                Resource: 
                  - !GetAtt AlarmProcessingQueue.Arn
                  - !GetAtt AlarmProcessingDeadLetterQueue.Arn
        - PolicyName: UnifiCredentialsSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Ref UnifiCredentialsSecret
      Path: /
      Tags: 
        - Key: "Name"
          Value: !Ref RoleName
      
  # S3 Bucket for storing uploaded files
  S3Bucket:
    Description: S3 bucket for alarm events.
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Content-Range
              - Accept-Ranges
              - Content-Encoding
              - Content-Length
              - ETag
            Id: OpenCors
            MaxAge: '3600'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: !Ref RetentionDays
            NoncurrentVersionExpirationInDays: !Ref RetentionDays
      Tags: 
        - Key: "Name"
          Value: !Sub "${BucketName}"

  # SQS Queue for delayed alarm processing
  AlarmProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-alarm-processing-queue"
      # DelaySeconds: 0  # Delay is configured per message, not per queue
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      VisibilityTimeout: 300  # 5 minutes (should exceed Lambda timeout)
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AlarmProcessingDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-alarm-processing-queue"
        - Key: "Purpose"
          Value: "Delayed alarm event processing"

  # Dead Letter Queue for failed alarm processing
  AlarmProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${FunctionName}-alarm-processing-dlq"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-alarm-processing-dlq"
        - Key: "Purpose"
          Value: "Dead letter queue for failed alarm processing"

  # SQS Event Source Mapping for Lambda
  AlarmProcessingSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt AlarmProcessingQueue.Arn
      FunctionName: !Ref LambdaFunction
      BatchSize: 1  # Process one message at a time
      MaximumBatchingWindowInSeconds: 0  # Process immediately when available

  # Secrets Manager for Unifi Protect credentials
  UnifiCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${FunctionName}-unifi-credentials"
      Description: "Unifi Protect credentials for video downloads"
      SecretString: !Sub |
        {
          "hostname": "${UnifiHost}",
          "username": "${UnifiUsername}",
          "password": "${UnifiPassword}",
          "apikey": "${UnifiApiKey}"
        }
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-unifi-credentials"
        - Key: "Purpose"
          Value: "Unifi Protect authentication credentials"

  # API gateway instance
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${FunctionName}-API"
      Description: !Sub "${EnvPrefix} - ${AppName} Proxy API"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags: 
        - Key: "Name"
          Value: !Sub "${FunctionName}-API"
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: '{proxy+}'
  

  # Proxy method for Post
  ApiGatewayProxyMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        CacheKeyParameters:
          - 'method.request.path.proxy'
        ContentHandling: "CONVERT_TO_TEXT"
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
  
  # Proxy method for Get
  ApiGatewayProxyMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        CacheKeyParameters:
          - 'method.request.path.proxy'
        ContentHandling: "CONVERT_TO_TEXT"
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function
                    - !Sub :${FunctionName}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true

  # API gateway deployment
  ApiGatewayDeployment:
    DependsOn:
      - ApiGatewayProxyMethodGet
      - ApiGatewayProxyMethodPost
      - ApiGatewayProxyOptions
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGateway

  # Enable logging of all HTTP requests
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: CloudWatchRole
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          DataTraceEnabled: true
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 2
      RestApiId: !Ref ApiGateway
      StageName: !Sub "${EnvPrefix}"

  # Custom Domain Name for API Gateway
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: "Name"
          Value: !Sub "${FunctionName}-domain"
        - Key: "Environment"
          Value: !Ref EnvPrefix

  # Base Path Mapping for custom domain
  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: UseCustomDomain
    DependsOn: ApiGatewayStage
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGatewayStage

  # Route53 A Record for Custom Domain (IPv4)
  DomainNameRecord:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

  # Route53 AAAA Record for Custom Domain (IPv6)
  DomainNameRecordAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

  # Route53 A Record for UniFi Domain
  UnifiDomainNameRecord:
    Type: AWS::Route53::RecordSet
    Condition: UseUnifiDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - HasHttpsPrefix
        - !Select [2, !Split ["/", !Ref UnifiHost]]
        - !Ref UnifiHost
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref UnifiHostIp

  # Proxy lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${FunctionName}"
      Code:
        S3Bucket: !Ref BucketNameDeployment
        S3Key: !Sub "${FunctionName}/publish.zip"
      Description: !Sub "${EnvPrefix} - ${AppName}"
              #AssemblyName::NameSpace.ClassName::FunctionHandlerName
      Handler: UnifiWebhookEventReceiver::UnifiWebhookEventReceiver.UnifiWebhookEventHandler::FunctionHandler
      MemorySize: 1536
      Timeout: 150
      Runtime: dotnet8
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          FunctionName: !Sub "${FunctionName}"
          DeployedEnv: !Sub "${EnvPrefix}"
          StorageBucket: !Sub "${BucketName}"
          ApiKey: !Sub "${ApiGatewayKey}"
          DeviceMetadata: !Ref DeviceMetadata
          UnifiCredentialsSecretArn: !Ref UnifiCredentialsSecret
          UnifiApiMetadataPath: !Ref UnifiApiMetadataPath
          DownloadDirectory: !Ref DownloadDirectory
          AlarmProcessingQueueUrl: !Ref AlarmProcessingQueue
          AlarmProcessingDlqUrl: !Ref AlarmProcessingDeadLetterQueue
          ProcessingDelaySeconds: !Ref ProcessingDelaySeconds
          SupportEmail: !Ref SupportEmail
          BuildSha: !Ref BuildSha
          BuildTimestamp: !Ref BuildTimestamp
          MaxRetentionDays: !Ref RetentionDays
          SummaryEventQueueUrl: !Ref SummaryEventQueue
          SummaryEventDlqUrl: !Ref SummaryEventDeadLetterQueue

  # Root invoker from API gateway to lambda
  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGateway
          - '/*/*/'
  
  # Proxy invoker from API gateway to lambda
  LambdaApiGatewayInvokeProxy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGateway
          - '/*/*/*'

  # API key
  ApiGatewayKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGateway
    Properties:
      Name: !Sub "${FunctionName}-ApiKey"
      Description: "API Key"
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Ref ApiGatewayStage

  # Usage plan key association
  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
      - ApiGateway
    Properties:
      KeyId: !Ref ApiGatewayKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Usage plan
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref ApiGatewayStage
      Description: !Sub "Usage Plan for ${FunctionName} API"
      Quota:
        Limit: 1000
        Period: DAY
      Throttle:
        BurstLimit: 5
        RateLimit: 2
      UsagePlanName: !Sub "${FunctionName}-plan"

# Output useful details
Outputs:
  UsagePlan:
    Description: API Gateway Usage Plan ID
    Value: !Ref UsagePlan
  Repository:
    Description: Source code repository
    Value: https://github.com/engineerthefuture/unifi-protect-event-backup-api
  POSTUnfiWebhookAlarmEventEndpoint:
    Description: POST endpoint for receiving alarm webhooks from Unifi Protect
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/alarmevent
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETLatestVideoEndpoint:
    Description: GET endpoint for downloading the most recent video file
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/latestvideo
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETEventDataEndpoint:
    Description: GET endpoint for retrieving stored alarm event data by eventKey
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/?eventKey={key}
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETMetadataEndpoint:
    Description: GET endpoint for fetching and storing camera metadata from Unifi Protect
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/metadata
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  GETSummaryEndpoint:
    Description: GET endpoint for retrieving the summary data for the UI
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${EnvPrefix}/summary
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiGatewayStage
  CustomDomainName:
    Condition: UseCustomDomain
    Description: Custom domain name for the API
    Value: !Ref DomainName
  CustomPOSTUnfiWebhookAlarmEventEndpoint:
    Condition: UseCustomDomain
    Description: POST endpoint for receiving alarm webhooks from Unifi Protect (Custom Domain)
    Value: !Sub "${DomainName}/${EnvPrefix}/alarmevent"
  CustomGETLatestVideoEndpoint:
    Condition: UseCustomDomain
    Description: GET endpoint for downloading the most recent video file (Custom Domain)
    Value: !Sub "${DomainName}/${EnvPrefix}/latestvideo"
  CustomGETEventDataEndpoint:
    Condition: UseCustomDomain
    Description: GET endpoint for retrieving stored alarm event data by eventKey (Custom Domain)
    Value: !Sub "${DomainName}/${EnvPrefix}/?eventKey={key}"
  CustomGETMetadataEndpoint:
    Condition: UseCustomDomain
    Description: GET endpoint for fetching and storing camera metadata from Unifi Protect (Custom Domain)
    Value: !Sub "${DomainName}/${EnvPrefix}/metadata"
  CustomGETSummaryEndpoint:
    Condition: UseCustomDomain
    Description: GET endpoint for retrieving the summary data for the UI (Custom Domain)
    Value: !Sub "${DomainName}/${EnvPrefix}/summary"
  DomainNameTarget:
    Condition: UseCustomDomain
    Description: Target domain name for DNS CNAME record
    Value: !GetAtt ApiGatewayDomainName.RegionalDomainName
  DomainNameHostedZoneId:
    Condition: UseCustomDomain
    Description: Hosted Zone ID for the API Gateway domain (for Route 53 alias records)
    Value: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
  CertificateArn:
    Condition: UseCustomDomain
    Description: ARN of the created SSL certificate
    Value: !Ref Certificate
    Export:
      Name: !Sub "${AWS::StackName}-CertificateArn"
  UnifiCertificateArn:
    Condition: UseUnifiDomain
    Description: ARN of the UniFi SSL certificate
    Value: !Ref UnifiCertificate
    Export:
      Name: !Sub "${AWS::StackName}-UnifiCertificateArn"
  UnifiDomainName:
    Condition: UseUnifiDomain
    Description: UniFi domain name
    Value: !If
      - HasHttpsPrefix
      - !Select [2, !Split ["/", !Ref UnifiHost]]
      - !Ref UnifiHost
  DNSRecordsCreated:
    Condition: UseCustomDomain
    Description: Confirmation that DNS records have been created
    Value: !Sub "DNS records created for ${DomainName}"