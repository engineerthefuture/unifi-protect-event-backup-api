openapi: 3.0.3
info:
  title: Unifi Protect Event Backup API
  description: |
    AWS Lambda function that receives and processes webhook events from Unifi Dream Machine Protect systems, 
    storing alarm event data in S3 for backup and analysis.
    
    ## Features
    - Real-time webhook processing from Unifi Protect systems
    - Secure S3 storage with date-organized folder structure
    - Device MAC address to human-readable name mapping
    - RESTful event retrieval API
    - Comprehensive CORS support for web clients
    
    ## Architecture
    This serverless application uses AWS Lambda, API Gateway, and S3 to provide a scalable, 
    cost-effective solution for backing up Unifi Protect alarm events. Events are automatically 
    organized by date and enriched with device names for easy identification.
    
    ## Authentication
    All endpoints require an API key passed in the `X-API-Key` header. The API key is generated 
    during CloudFormation deployment and can be retrieved from the AWS API Gateway console.
    
    ## Rate Limiting
    API Gateway enforces rate limiting and throttling to prevent abuse. Default limits are:
    - Burst: 5000 requests
    - Rate: 10000 requests per second
    
    ## Data Retention
    Events are stored indefinitely in S3. Configure S3 lifecycle policies for automatic archival 
    or deletion based on your retention requirements.
  version: 1.0.0
  contact:
    name: Brent Foster
    email: brent@brentfoster.me
    url: https://github.com/engineerthefuture/unifi-protect-event-backup-api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/engineerthefuture/unifi-protect-event-backup-api/blob/main/LICENSE

servers:
  - url: https://your-api-id.execute-api.us-east-1.amazonaws.com/prod
    description: Production AWS API Gateway endpoint
  - url: https://your-api-id.execute-api.us-west-2.amazonaws.com/prod
    description: Production AWS API Gateway endpoint (US West)
  - url: https://staging-api-id.execute-api.us-east-1.amazonaws.com/staging
    description: Staging environment (optional)

security:
  - ApiKeyAuth: []

paths:
  /alarmevent:
    post:
      summary: Process Unifi Protect alarm webhook
      description: |
        Receives and processes webhook events from Unifi Dream Machine Protect systems.
        
        **Processing Steps:**
        1. Validates incoming JSON payload structure
        2. Extracts alarm triggers and device information
        3. Maps device MAC addresses to human-readable names
        4. Generates unique event keys and timestamps
        5. Stores enriched event data in S3 with date-based organization
        6. Returns success confirmation with event details
        
        **Storage Format:**
        Events are stored as JSON files in S3 with the path structure:
        `{bucket}/{YYYY-MM-DD}/{deviceMac}_{timestamp}.json`
        
        **Error Handling:**
        - Malformed JSON returns 400 Bad Request
        - Missing required fields return 400 Bad Request
        - Server errors return 500 Internal Server Error
        - All errors include descriptive error messages
      operationId: processAlarmEvent
      tags:
        - Alarm Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiWebhookRequest'
            examples:
              motionDetection:
                summary: Motion Detection Event
                description: Typical motion detection event from outdoor camera
                value:
                  alarm:
                    name: "Backup Alarm Event"
                    sources:
                      - device: "28704E113F64"
                        type: "include"
                    conditions:
                      - condition:
                          type: "is"
                          source: "motion"
                    triggers:
                      - key: "motion"
                        device: "28704E113F33"
                        eventId: "67b389ab005ec703e40075a5"
                        zones:
                          zone: []
                          line: []
                          loiter: []
                  timestamp: 1739819436108
              personDetection:
                summary: Person Detection Event
                description: AI-powered person detection with zone information
                value:
                  alarm:
                    name: "Person Detection Alarm"
                    sources:
                      - device: "F4E2C67A2FE8"
                        type: "include"
                    conditions:
                      - condition:
                          type: "is"
                          source: "person"
                    triggers:
                      - key: "person"
                        device: "F4E2C67A2FE8"
                        eventId: "67b389ab005ec703e40075a6"
                        zones:
                          zone: ["entrance", "driveway"]
                          line: []
                          loiter: []
                  timestamp: 1739819500000
              vehicleDetection:
                summary: Vehicle Detection Event
                description: Vehicle detection with multiple zones triggered
                value:
                  alarm:
                    name: "Vehicle Detection Alarm"
                    sources:
                      - device: "28704E113C44"
                        type: "include"
                    conditions:
                      - condition:
                          type: "is"
                          source: "vehicle"
                    triggers:
                      - key: "vehicle"
                        device: "28704E113C44"
                        eventId: "67b389ab005ec703e40075a7"
                        zones:
                          zone: ["street", "driveway"]
                          line: ["property_line"]
                          loiter: []
                  timestamp: 1739819600000
      responses:
        '200':
          description: Event successfully processed and stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                motionSuccess:
                  summary: Motion event processed
                  value:
                    message: "bf-prod-lambda-unifi-protect-event-backup-api has successfully processed the Unifi alarm event webhook with key 28704E113F33_1739819436108.json for Backyard West that occurred at 2025-01-17T20:43:56."
                personSuccess:
                  summary: Person detection processed
                  value:
                    message: "bf-prod-lambda-unifi-protect-event-backup-api has successfully processed the Unifi alarm event webhook with key F4E2C67A2FE8_1739819500000.json for Front that occurred at 2025-01-17T20:45:00."
        '400':
          description: Bad request - Invalid or malformed data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidJson:
                  summary: Invalid JSON format
                  value:
                    msg: "ERROR 400: malformed or invalid request format"
                missingAlarm:
                  summary: Missing alarm object
                  value:
                    msg: "ERROR 400: No alarm object found in request"
                noTriggers:
                  summary: Missing triggers
                  value:
                    msg: "ERROR 400: you must have triggers in your payload"
                invalidTimestamp:
                  summary: Invalid timestamp
                  value:
                    msg: "ERROR 400: timestamp must be a valid Unix timestamp in milliseconds"
        '401':
          description: Unauthorized - Invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingKey:
                  summary: Missing API key
                  value:
                    message: "Unauthorized"
                invalidKey:
                  summary: Invalid API key
                  value:
                    message: "Forbidden"
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                msg: "Rate limit exceeded. Please reduce request frequency."
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                configError:
                  summary: Configuration error
                  value:
                    msg: "Server configuration error: StorageBucket not configured"
                s3Error:
                  summary: Storage error
                  value:
                    msg: "Failed to store event in S3: Access denied"
    
    options:
      summary: CORS preflight request
      description: |
        Handles CORS preflight requests for web client support.
        
        **CORS Configuration:**
        - **Allow-Origin**: `*` (configurable for production)
        - **Allow-Methods**: `OPTIONS, POST, GET`
        - **Allow-Headers**: `Content-Type, X-API-Key`
        - **Max-Age**: 86400 seconds (24 hours)
        
        **Usage:**
        Web browsers automatically send OPTIONS requests before cross-origin POST/GET requests.
        This endpoint ensures proper CORS headers are returned to allow web applications to
        interact with the API from different domains.
      operationId: handleCorsOptions
      tags:
        - CORS
      responses:
        '200':
          description: CORS headers provided
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
              description: Allowed origins for cross-origin requests
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "OPTIONS,POST,GET"
              description: Allowed HTTP methods
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type,X-API-Key"
              description: Allowed request headers
            Access-Control-Max-Age:
              schema:
                type: integer
                example: 86400
              description: Preflight cache duration in seconds

  /:
    get:
      summary: Retrieve stored alarm event
      description: |
        Retrieves a previously stored alarm event by its unique event key.
        
        **Event Key Format:**
        Event keys follow the pattern: `{deviceMac}_{timestamp}.json`
        - **deviceMac**: 12-character hexadecimal MAC address (no separators)
        - **timestamp**: Unix timestamp in milliseconds when the event occurred
        - **.json**: File extension indicating JSON format
        
        **Storage Location:**
        Events are stored in S3 with date-based organization:
        `s3://{bucket}/{YYYY-MM-DD}/{eventKey}`
        
        **Response Data:**
        Returns the complete event data including:
        - Original alarm information from Unifi Protect
        - Enriched data (device names, formatted timestamps)
        - Event metadata (storage location, retrieval links)
        
        **Use Cases:**
        - Event lookup by timestamp and device
        - Integration with monitoring dashboards
        - Historical event analysis
        - Audit trail reconstruction
      operationId: getAlarmEvent
      tags:
        - Event Retrieval
      parameters:
        - name: eventKey
          in: query
          required: true
          schema:
            type: string
            pattern: '^[A-Fa-f0-9]{12}_\d+\.json$'
            minLength: 20
            maxLength: 50
          description: |
            Unique event identifier in format: {deviceMac}_{timestamp}.json
            
            **Format Requirements:**
            - **deviceMac**: Exactly 12 hexadecimal characters (A-F, a-f, 0-9)
            - **timestamp**: Unix timestamp in milliseconds (10+ digits)
            - **extension**: Must end with `.json`
            
            **Examples:**
            - `28704E113F33_1739819436108.json` (Motion from Backyard West)
            - `F4E2C67A2FE8_1739819500000.json` (Person from Front Camera)
          examples:
            motionEvent:
              summary: Motion detection event key
              value: "28704E113F33_1739819436108.json"
            personEvent:
              summary: Person detection event key
              value: "F4E2C67A2FE8_1739819500000.json"
            vehicleEvent:
              summary: Vehicle detection event key
              value: "28704E113C44_1739819600000.json"
      responses:
        '200':
          description: Event successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredAlarmEvent'
              examples:
                motionEvent:
                  summary: Motion detection event
                  value:
                    name: "Motion Detection Alert"
                    timestamp: 1739819436108
                    triggers:
                      - key: "motion"
                        device: "28704E113F33"
                        eventId: "67b389ab005ec703e40075a5"
                        deviceName: "Backyard West"
                        date: "2025-01-17T20:43:56"
                        eventKey: "28704E113F33_1739819436108.json"
                        zones:
                          zone: []
                          line: []
                          loiter: []
                    sources:
                      - device: "28704E113F64"
                        type: "include"
                    conditions:
                      - condition:
                          type: "is"
                          source: "motion"
                    eventPath: "/protect/events/67b389ab005ec703e40075a5"
                    eventLocalLink: "https://udm.local/protect/events/67b389ab005ec703e40075a5"
                personEvent:
                  summary: Person detection event
                  value:
                    name: "Person Detection Alert"
                    timestamp: 1739819500000
                    triggers:
                      - key: "person"
                        device: "F4E2C67A2FE8"
                        eventId: "67b389ab005ec703e40075a6"
                        deviceName: "Front"
                        date: "2025-01-17T20:45:00"
                        eventKey: "F4E2C67A2FE8_1739819500000.json"
                        zones:
                          zone: ["entrance", "driveway"]
                          line: []
                          loiter: []
                    sources:
                      - device: "F4E2C67A2FE8"
                        type: "include"
                    conditions:
                      - condition:
                          type: "is"
                          source: "person"
                    eventPath: "/protect/events/67b389ab005ec703e40075a6"
                    eventLocalLink: "https://udm.local/protect/events/67b389ab005ec703e40075a6"
        '400':
          description: Bad request - Missing or invalid event key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingKey:
                  summary: Missing event key parameter
                  value:
                    msg: "ERROR 400: you must provide an eventKey in the query parameters"
                invalidFormat:
                  summary: Invalid event key format
                  value:
                    msg: "ERROR 400: eventKey must follow format {deviceMac}_{timestamp}.json"
                invalidMac:
                  summary: Invalid MAC address format
                  value:
                    msg: "ERROR 400: device MAC address must be 12 hexadecimal characters"
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Event not found in storage
                  value:
                    msg: "Event not found: 28704E113F33_1739819436108.json"
                bucketNotFound:
                  summary: Storage bucket not accessible
                  value:
                    msg: "Storage bucket not found or not accessible"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                s3Error:
                  summary: S3 access error
                  value:
                    msg: "Failed to retrieve event from S3: Access denied"
                configError:
                  summary: Configuration error
                  value:
                    msg: "Server configuration error: StorageBucket not configured"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key required for all requests. 
        
        **Obtaining API Key:**
        1. Deploy the CloudFormation stack
        2. Retrieve from AWS API Gateway console
        3. Or use AWS CLI: `aws apigateway get-api-keys --include-values`
        
        **Usage:**
        Include in all requests as a header:
        ```
        X-API-Key: your-api-key-here
        ```
        
        **Security Notes:**
        - Keep API keys secure and rotate regularly
        - Use different keys for different environments
        - Monitor API key usage in CloudWatch

  schemas:
    UnifiWebhookRequest:
      type: object
      required:
        - alarm
        - timestamp
      properties:
        alarm:
          $ref: '#/components/schemas/AlarmObject'
        timestamp:
          type: integer
          format: int64
          minimum: 1000000000000
          maximum: 9999999999999
          description: |
            Unix timestamp in milliseconds when the event occurred.
            Must be between 1000000000000 (2001-09-09) and 9999999999999 (2286-11-20).
          example: 1739819436108
      description: |
        Webhook request payload sent by Unifi Dream Machine Protect systems when alarm events occur.
        
        **Source:** Unifi Protect webhook configuration
        **Content-Type:** application/json
        **Frequency:** Real-time (as events occur)

    AlarmObject:
      type: object
      required:
        - name
        - triggers
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            Human-readable name of the alarm configuration as defined in Unifi Protect.
            This corresponds to the alarm rule name in the Unifi Protect web interface.
          example: "Backup Alarm Event"
        sources:
          type: array
          items:
            $ref: '#/components/schemas/AlarmSource'
          description: |
            List of devices included or excluded in the alarm configuration.
            Defines which cameras and devices are monitored by this alarm rule.
          minItems: 0
          maxItems: 50
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/AlarmCondition'
          description: |
            Conditions that must be met to trigger the alarm.
            These define the types of detection events that activate the alarm.
          minItems: 0
          maxItems: 20
        triggers:
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/AlarmTrigger'
          description: |
            List of trigger events that activated this alarm.
            At least one trigger is required for a valid alarm event.
        eventPath:
          type: string
          description: |
            Internal path to the event in Unifi Protect system.
            Used for linking back to the original event in the Unifi interface.
          example: "/protect/events/67b389ab005ec703e40075a5"
        eventLocalLink:
          type: string
          format: uri
          description: |
            Local URL to view the event in Unifi Protect web interface.
            Only accessible from networks that can reach the UDM.
          example: "https://udm.local/protect/events/67b389ab005ec703e40075a5"

    AlarmSource:
      type: object
      required:
        - device
        - type
      properties:
        device:
          type: string
          pattern: '^[A-Fa-f0-9]{12}$'
          description: |
            Device MAC address in 12-character hexadecimal format (no separators).
            This uniquely identifies the Unifi Protect camera or device.
            
            **Format:** AABBCCDDEEFF (no colons, dashes, or spaces)
          example: "28704E113F64"
        type:
          type: string
          enum: ["include", "exclude"]
          description: |
            Whether this device is included or excluded from the alarm rule.
            
            - **include**: Device events will trigger the alarm
            - **exclude**: Device events will not trigger the alarm
          example: "include"

    AlarmCondition:
      type: object
      required:
        - condition
      properties:
        condition:
          type: object
          required:
            - type
            - source
          properties:
            type:
              type: string
              enum: ["is", "is_not"]
              description: |
                Type of condition evaluation.
                
                - **is**: Alarm triggers when the source event occurs
                - **is_not**: Alarm triggers when the source event does NOT occur
              example: "is"
            source:
              type: string
              enum: ["motion", "person", "vehicle", "package", "intrusion", "object"]
              description: |
                Type of detection that the condition evaluates.
                
                - **motion**: General motion detection
                - **person**: AI-powered person detection
                - **vehicle**: AI-powered vehicle detection
                - **package**: AI-powered package detection
                - **intrusion**: Zone intrusion detection
                - **object**: General object detection
              example: "motion"

    AlarmTrigger:
      type: object
      required:
        - key
        - device
        - eventId
      properties:
        key:
          type: string
          enum: ["motion", "person", "vehicle", "package", "intrusion", "object"]
          description: |
            Type of detection that triggered the alarm.
            Must match one of the condition sources in the alarm configuration.
          example: "motion"
        device:
          type: string
          pattern: '^[A-Fa-f0-9]{12}$'
          description: |
            MAC address of the device that detected the event.
            Format: 12 hexadecimal characters without separators.
          example: "28704E113F33"
        eventId:
          type: string
          minLength: 1
          maxLength: 50
          description: |
            Unique identifier for this specific detection event in Unifi Protect.
            Used to link back to video footage and event details.
          example: "67b389ab005ec703e40075a5"
        zones:
          type: object
          properties:
            zone:
              type: array
              items:
                type: string
              description: |
                Named detection zones within the camera's field of view that were triggered.
                These correspond to zones configured in Unifi Protect.
              example: ["entrance", "driveway"]
            line:
              type: array
              items:
                type: string
              description: |
                Line crossing detection zones that were triggered.
                Used for tracking movement across defined boundaries.
              example: ["property_line"]
            loiter:
              type: array
              items:
                type: string
              description: |
                Loitering detection zones that were triggered.
                Used for detecting prolonged presence in specific areas.
              example: []
          description: |
            Specific zones within the camera's field of view that triggered the detection.
            Zones are configured in the Unifi Protect web interface.
        deviceName:
          type: string
          description: |
            Human-readable device name (added during processing).
            Mapped from MAC address using environment variables.
          example: "Backyard West"
          readOnly: true
        date:
          type: string
          format: date-time
          description: |
            ISO 8601 formatted timestamp (added during processing).
            Converted from the Unix timestamp for readability.
          example: "2025-01-17T20:43:56"
          readOnly: true
        eventKey:
          type: string
          description: |
            Unique key for retrieving this event (added during processing).
            Format: {deviceMac}_{timestamp}.json
          example: "28704E113F33_1739819436108.json"
          readOnly: true

    StoredAlarmEvent:
      allOf:
        - $ref: '#/components/schemas/AlarmObject'
        - type: object
          properties:
            timestamp:
              type: integer
              format: int64
              description: |
                Unix timestamp in milliseconds when the event occurred.
                Original timestamp from the webhook request.
              example: 1739819436108
      description: |
        Alarm event as stored in S3 with additional processing metadata.
        
        **Storage Location:** `s3://{bucket}/{YYYY-MM-DD}/{deviceMac}_{timestamp}.json`
        **Retention:** Indefinite (configure S3 lifecycle policies as needed)
        **Encryption:** Server-side encryption with AES-256

    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: |
            Detailed success message with event processing information.
            Includes event key, device name, and formatted timestamp for reference.
          example: "bf-prod-lambda-unifi-protect-event-backup-api has successfully processed the Unifi alarm event webhook with key 28704E113F33_1739819436108.json for Backyard West that occurred at 2025-01-17T20:43:56."

    ErrorResponse:
      type: object
      required:
        - msg
      properties:
        msg:
          type: string
          description: |
            Descriptive error message explaining what went wrong.
            Includes error code (400, 500, etc.) and specific details for troubleshooting.
          example: "ERROR 400: malformed or invalid request format"

tags:
  - name: Alarm Events
    description: |
      Processing of incoming alarm webhook events from Unifi Protect systems.
      
      **Typical Flow:**
      1. Unifi Protect detects motion/person/vehicle
      2. Alarm rule evaluates conditions
      3. Webhook sent to this API
      4. Event processed and stored in S3
      5. Success response returned to Unifi
      
  - name: Event Retrieval
    description: |
      Retrieval of stored alarm events for analysis and integration.
      
      **Use Cases:**
      - Dashboard integration
      - Historical analysis
      - Event correlation
      - Audit trails
      
  - name: CORS
    description: |
      Cross-Origin Resource Sharing support for web applications.
      
      **Supported Origins:** All origins (`*`)
      **Supported Methods:** GET, POST, OPTIONS
      **Supported Headers:** Content-Type, X-API-Key

externalDocs:
  description: |
    Complete project documentation including setup, deployment, and troubleshooting guides.
  url: https://github.com/engineerthefuture/unifi-protect-event-backup-api/blob/main/README.md
