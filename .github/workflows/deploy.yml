
name: Build, Test, and Deploy to AWS

# This workflow builds the application, runs unit tests, and deploys to AWS
# Deployment will only proceed if all unit tests pass
# Deploys to 'prod' environment from main branch, 'dev' environment from other branches
on:
  push:
    branches:
      - main
      - 'feature-**'
      - 'bugfix-**'
      - 'hotfix-**'
      - dev

jobs:
  # Build job: Compiles code, runs tests, and prepares deployment artifacts
  # This job must complete successfully for deployment to proceed
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      OIDC_ROLE_NAME: ${{ vars.OIDC_ROLE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV_PREFIX=prod" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-prod-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-prod-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-prod-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
          else
            echo "ENV_PREFIX=dev" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-dev-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-dev-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-dev-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to environment: $ENV_PREFIX"
          echo "Stack name: $STACK_NAME"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          dotnet restore UnifiWebhookEventReceiver.csproj
          dotnet restore test/UnifiWebhookEventReceiverTests.csproj

      - name: Build
        run: |
          dotnet build UnifiWebhookEventReceiver.csproj --configuration Release --no-restore
          dotnet build test/UnifiWebhookEventReceiverTests.csproj --configuration Release --no-restore

      - name: Run unit tests
        id: test
        run: |
          echo "Running unit tests..."
          dotnet test test/ --configuration Release --no-build --verbosity normal --logger trx --results-directory ./test-results
          TEST_EXIT_CODE=$?
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "::error::Unit tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi
          echo "All unit tests passed successfully!"

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: Unit Test Results
          path: ./test-results/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-empty: true
          only-summary: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./test-results

      - name: Display test results summary
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          if [ -d "./test-results" ] && [ "$(ls -A ./test-results)" ]; then
            echo "Test result files found:"
            ls -la ./test-results/
            echo ""
            echo "Test result details:"
            for file in ./test-results/*.trx; do
              if [ -f "$file" ]; then
                echo "Processing: $file"
                # Extract basic test information from TRX file
                grep -o 'total="[^"]*"' "$file" | head -1 || echo "Could not parse total tests"
                grep -o 'passed="[^"]*"' "$file" | head -1 || echo "Could not parse passed tests"
                grep -o 'failed="[^"]*"' "$file" | head -1 || echo "Could not parse failed tests"
                echo "---"
              fi
            done
          else
            echo "No test result files found."
          fi

      - name: Test Summary
        if: always()
        run: |
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "✅ All unit tests passed! Deployment can proceed."
            echo "TEST_STATUS=passed" >> $GITHUB_ENV
          else
            echo "❌ Unit tests failed! Deployment will be skipped."
            echo "TEST_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Download Chromium for Lambda
        if: steps.test.outcome == 'success'
        run: |
          echo "Downloading Chromium browser for Lambda..."
          mkdir -p chromium
          cd chromium
          wget -q https://storage.googleapis.com/chrome-for-testing-public/127.0.6533.88/linux64/chrome-linux64.zip
          unzip -q chrome-linux64.zip
          ls -la chrome-linux64/
          echo "Chromium download completed successfully"

      - name: Publish
        if: steps.test.outcome == 'success'
        run: dotnet publish UnifiWebhookEventReceiver.csproj --configuration Release --output ./publish

      - name: Package Chromium with Lambda
        if: steps.test.outcome == 'success'
        run: |
          echo "Packaging Chromium with Lambda function..."
          # Create chromium directory in publish folder
          mkdir -p ./publish/chromium
          # Copy the chrome executable and dependencies
          cp -r ./chromium/chrome-linux64/* ./publish/chromium/
          # Verify the chrome executable exists and is executable
          ls -la ./publish/chromium/chrome
          chmod +x ./publish/chromium/chrome
          echo "Chromium packaging completed successfully"

      - name: Upload published files
        if: steps.test.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish
      
      - name: Zip Lambda package
        if: steps.test.outcome == 'success'
        run: |
          cd publish
          zip -r ../lambda.zip .
          cd ..

      - name: Configure AWS credentials (OIDC)
        if: steps.test.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.OIDC_ROLE_NAME }}
          aws-region: us-east-1
          
      - name: Upload Lambda package to S3
        if: steps.test.outcome == 'success'
        run: |
          aws s3 cp lambda.zip s3://${{ steps.env.outputs.BUCKET_DEPLOYMENT }}/${{ steps.env.outputs.S3_KEY_PREFIX }}/publish.zip

  # Deploy job: Deploys the CloudFormation stack and updates Lambda function code
  # Only runs if the build job (including tests) completes successfully
  deploy:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      OIDC_ROLE_NAME: ${{ vars.OIDC_ROLE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV_PREFIX=prod" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-prod-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-prod-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-prod-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
          else
            echo "ENV_PREFIX=dev" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-dev-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-dev-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-dev-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to environment: $ENV_PREFIX"
          echo "Stack name: $STACK_NAME"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.OIDC_ROLE_NAME }}
          aws-region: us-east-1

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file templates/cf-stack-cs.yaml \
            --stack-name ${{ steps.env.outputs.STACK_NAME }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              OwnerName="${{ vars.OWNER_NAME }}" \
              AppName="${{ vars.APP_NAME }}" \
              AppDescription="${{ vars.APP_DESCRIPTION }}" \
              EnvPrefix="${{ steps.env.outputs.ENV_PREFIX }}" \
              BucketName="${{ steps.env.outputs.BUCKET_STORAGE }}" \
              BucketNameDeployment="${{ steps.env.outputs.BUCKET_DEPLOYMENT }}" \
              FunctionName="${{ steps.env.outputs.LAMBDA_NAME }}" \
              RoleName="${{ steps.env.outputs.LAMBDA_NAME }}-role" \
              UnifiHost="${{ secrets.UNIFI_HOST }}" \
              UnifiUsername="${{ secrets.UNIFI_USERNAME }}" \
              UnifiPassword="${{ secrets.UNIFI_PASSWORD }}" \
            --tags \
              Owner="${{ vars.OWNER_NAME }}" \
              AppName="${{ vars.APP_NAME }}" \
              Description="${{ vars.APP_DESCRIPTION }}" \
              Environment="${{ steps.env.outputs.ENV_PREFIX }}"

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.env.outputs.LAMBDA_NAME }} \
            --s3-bucket ${{ steps.env.outputs.BUCKET_DEPLOYMENT }} \
            --s3-key ${{ steps.env.outputs.S3_KEY_PREFIX }}/publish.zip
