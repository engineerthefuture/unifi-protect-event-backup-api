name: API - Build, Test, and Deploy to AWS

# This workflow builds the application, runs unit tests, and deploys to AWS
# Deployment will only proceed if all unit tests pass
# Deploys to 'prod' environment from main branch, 'dev' environment from other branches
on:
  push:
    branches:
      - main
      - 'feature-**'
      - 'bugfix-**'
      - 'hotfix-**'
      - dev
    paths:
      - 'src/**'
      - 'test/**'
      - 'templates/cf-stack-cs.yaml'
      - '.github/workflows/deploy.yml'
      - 'UnifiWebhookEventReceiver.csproj'
      - 'UnifiWebhookEventReceiver.sln'
      - 'aws-lambda-tools-defaults.json'
      - 'global.json'
      - 'summary-event-lambda/**'

jobs:
  # Build job: Compiles code, runs tests, and prepares deployment artifacts
  # This job must complete successfully for deployment to proceed
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      OIDC_ROLE_NAME: ${{ vars.OIDC_ROLE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV_PREFIX=prod" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-prod-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-prod-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-prod-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "DOMAIN_NAME=${{ vars.PROD_DOMAIN_NAME }}" >> $GITHUB_OUTPUT
            echo "HOSTED_ZONE_ID=${{ vars.HOSTED_ZONE_ID }}" >> $GITHUB_OUTPUT
          else
            echo "ENV_PREFIX=dev" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-dev-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-dev-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-dev-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "DOMAIN_NAME=${{ vars.DEV_DOMAIN_NAME }}" >> $GITHUB_OUTPUT
            echo "HOSTED_ZONE_ID=${{ vars.HOSTED_ZONE_ID }}" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to environment: $ENV_PREFIX"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          dotnet restore UnifiWebhookEventReceiver.csproj
          dotnet restore test/UnifiWebhookEventReceiverTests.csproj

      - name: Set up Node.js for summary-event-lambda
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install JS dependencies and run tests for summary-event-lambda
        working-directory: summary-event-lambda
        id: js_test
        run: |
          npm install --no-audit --no-fund
          mkdir -p test-results
          npx jest --colors --ci --reporters=default --reporters=jest-junit
        env:
          CI: true

      - name: Debug - List test-results directory
        run: |
          ls -l summary-event-lambda/test-results || true
          cat summary-event-lambda/test-results/js-junit.xml || true

      - name: Upload JS unit test results
        uses: actions/upload-artifact@v4
        with:
          name: js-test-results
          path: summary-event-lambda/test-results/

      - name: Post JS unit test summary
        if: always()
        run: |
          echo "## üìä JS Unit Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f summary-event-lambda/test-results/js-junit.xml ]; then
            TOTAL=$(grep -o 'tests="[0-9]*"' summary-event-lambda/test-results/js-junit.xml | head -1 | grep -o '[0-9]*')
            FAILURES=$(grep -o 'failures="[0-9]*"' summary-event-lambda/test-results/js-junit.xml | head -1 | grep -o '[0-9]*')
            ERRORS=$(grep -o 'errors="[0-9]*"' summary-event-lambda/test-results/js-junit.xml | head -1 | grep -o '[0-9]*')
            PASSED=$((TOTAL - FAILURES - ERRORS))
            STATUS=‚úÖ
            if [ "$FAILURES" != "0" ] || [ "$ERRORS" != "0" ]; then STATUS=‚ùå; fi
            echo "$STATUS $PASSED/$TOTAL tests passed ($FAILURES failures, $ERRORS errors)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå JS test results not found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if JS unit tests failed
        if: steps.js_test.outcome != 'success'
        run: |
          echo "‚ùå JS unit tests failed. Skipping deployment."
          exit 1

      - name: Build
        run: |
          dotnet build UnifiWebhookEventReceiver.csproj --configuration Release --no-restore
          dotnet build test/UnifiWebhookEventReceiverTests.csproj --configuration Release --no-restore

      - name: Run APIregression tests with coverage
        id: test
        run: |
          echo "Running API regression tests with code coverage analysis..."
          
          # Create directories for coverage results
          mkdir -p ./coverage-results
          mkdir -p ./test-results
          
          # Run tests with code coverage collection
          dotnet test test/ \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory ./test-results \
            --collect:"XPlat Code Coverage" \
            --settings test/coverlet.runsettings
          
          TEST_EXIT_CODE=$?
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "::error::Regression tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi
          
          # Find the generated coverage file and move it to expected location
          echo "Looking for coverage files..."
          find ./test-results -name "coverage.opencover.xml" -type f
          
          COVERAGE_FILE=$(find ./test-results -name "coverage.opencover.xml" -type f | head -n1)
          if [ -f "$COVERAGE_FILE" ]; then
            echo "Found coverage file: $COVERAGE_FILE"
            cp "$COVERAGE_FILE" ./coverage-results/coverage.opencover.xml
            echo "Coverage file copied to ./coverage-results/coverage.opencover.xml"
          else
            echo "::error::Coverage file not found"
            exit 1
          fi
          
          # Generate coverage reports in multiple formats
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.4
          
          reportgenerator \
            -reports:"./coverage-results/coverage.opencover.xml" \
            -targetdir:"./coverage-results/html" \
            -reporttypes:"Html;JsonSummary;Badges;TextSummary;Cobertura" \
            -verbosity:Info \
            -classfilters:"-xunit*;-*.Tests*" \
            -assemblyfilters:"-xunit*;-*.Tests*"
          
          # Display coverage summary
          echo "=== Code Coverage Summary ==="
          if [ -f "./coverage-results/html/Summary.txt" ]; then
            cat ./coverage-results/html/Summary.txt
          fi
          
          # Extract key metrics for annotations
          if [ -f "./coverage-results/html/Summary.json" ]; then
            echo "Parsing coverage metrics..."
            COVERAGE_DATA=$(cat ./coverage-results/html/Summary.json)
            echo "COVERAGE_DATA<<EOF" >> $GITHUB_ENV
            echo "$COVERAGE_DATA" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          echo "All regression tests passed successfully!"

      - name: Create coverage summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '## üìä API Regression Test Results & Code Coverage\n\n';
            
            try {
              // Parse coverage data
              const coverageFile = './coverage-results/html/Summary.json';
              if (fs.existsSync(coverageFile)) {
                const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
                
                const lineCoverage = coverage.summary.linecoverage || 0;
                const branchCoverage = coverage.summary.branchcoverage || 0;
                const methodCoverage = coverage.summary.methodcoverage || 0;
                
                // Coverage badges
                const lineBadge = lineCoverage >= 80 ? 'üü¢' : lineCoverage >= 60 ? 'üü°' : 'üî¥';
                const branchBadge = branchCoverage >= 80 ? 'üü¢' : branchCoverage >= 60 ? 'üü°' : 'üî¥';
                const methodBadge = methodCoverage >= 80 ? 'üü¢' : methodCoverage >= 60 ? 'üü°' : 'üî¥';
                
                summary += `### Coverage Metrics\n\n`;
                summary += `| Metric | Coverage | Status |\n`;
                summary += `|--------|----------|--------|\n`;
                summary += `| Line Coverage | ${lineCoverage.toFixed(1)}% | ${lineBadge} |\n`;
                summary += `| Branch Coverage | ${branchCoverage.toFixed(1)}% | ${branchBadge} |\n`;
                summary += `| Method Coverage | ${methodCoverage.toFixed(1)}% | ${methodBadge} |\n\n`;
                
                // Detailed coverage by assembly
                if (coverage.coverage && coverage.coverage.length > 0) {
                  summary += `### Coverage by Assembly\n\n`;
                  summary += `| Assembly | Line % | Branch % | Method % |\n`;
                  summary += `|----------|--------|----------|----------|\n`;
                  
                  coverage.coverage.forEach(assembly => {
                    if (assembly.name && !assembly.name.includes('Test')) {
                      const linePercent = ((assembly.coveredlines / assembly.coverablelines) * 100) || 0;
                      const branchPercent = ((assembly.coveredbranches / assembly.totalbranches) * 100) || 0;
                      const methodPercent = ((assembly.coveredmethods / assembly.totalmethods) * 100) || 0;
                      
                      summary += `| ${assembly.name} | ${linePercent.toFixed(1)}% | ${branchPercent.toFixed(1)}% | ${methodPercent.toFixed(1)}% |\n`;
                    }
                  });
                }
                
                summary += '\n';
              }
              
              // Test results summary
              const testResultsDir = './test-results';
              if (fs.existsSync(testResultsDir)) {
                const files = fs.readdirSync(testResultsDir).filter(f => f.endsWith('.trx'));
                if (files.length > 0) {
                  summary += `### Test Execution Results\n\n`;
                  files.forEach(file => {
                    const content = fs.readFileSync(`${testResultsDir}/${file}`, 'utf8');
                    const totalMatch = content.match(/total="(\d+)"/);
                    const passedMatch = content.match(/passed="(\d+)"/);
                    const failedMatch = content.match(/failed="(\d+)"/);
                    
                    if (totalMatch && passedMatch) {
                      const total = parseInt(totalMatch[1]);
                      const passed = parseInt(passedMatch[1]);
                      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;
                      const status = failed === 0 ? '‚úÖ' : '‚ùå';
                      
                      summary += `${status} **${passed}/${total} tests passed** (${failed} failed)\n\n`;
                    }
                  });
                }
              }
              
              // Quality metrics interpretation
              summary += `### Quality Assessment\n\n`;
              if (fs.existsSync('./coverage-results/html/Summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('./coverage-results/html/Summary.json', 'utf8'));
                const avgCoverage = (coverage.summary.linecoverage + coverage.summary.branchcoverage) / 2;
                
                if (avgCoverage >= 80) {
                  summary += `üéØ **Excellent coverage** - The codebase has comprehensive test coverage.\n\n`;
                } else if (avgCoverage >= 60) {
                  summary += `‚ö° **Good coverage** - Consider adding tests for uncovered branches and edge cases.\n\n`;
                } else {
                  summary += `‚ö†Ô∏è **Coverage needs improvement** - Significant portions of code lack test coverage.\n\n`;
                }
              }
              
            } catch (error) {
              summary += `‚ùå Error parsing coverage results: ${error.message}\n\n`;
            }
            
            core.summary.addRaw(summary);
            await core.summary.write();

      - name: Publish API regression test results
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: API Regression Test Results
          path: ./test-results/*.trx
          reporter: dotnet-trx
          fail-on-error: true
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-empty: true
          only-summary: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./test-results

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: ./coverage-results

      - name: Add coverage to PR comment
        if: github.event_name == 'pull_request' && always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            ## üìä Code Quality Report
            
            ### Coverage Analysis
            Coverage reports have been generated and uploaded as artifacts.
            
            You can download the detailed HTML coverage report from the workflow run artifacts.
            
            ### Complexity Analysis  
            Cyclomatic complexity analysis has been performed. Check the workflow logs and complexity-results artifacts for detailed metrics.
            
            ### Quality Metrics
            - **Line Coverage**: Check the detailed report for exact percentages
            - **Branch Coverage**: Detailed branch analysis available
            - **Cyclomatic Complexity**: Method complexity metrics included in artifacts
            - **Overall Code Health**: Quality assessment complete
            
            üìà Full interactive HTML coverage report and complexity analysis available in workflow artifacts!

      - name: Display test results summary
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          if [ -d "./test-results" ] && [ "$(ls -A ./test-results)" ]; then
            echo "Test result files found:"
            ls -la ./test-results/
            echo ""
            echo "Test result details:"
            for file in ./test-results/*.trx; do
              if [ -f "$file" ]; then
                echo "Processing: $file"
                # Extract basic test information from TRX file
                grep -o 'total="[^"]*"' "$file" | head -1 || echo "Could not parse total tests"
                grep -o 'passed="[^"]*"' "$file" | head -1 || echo "Could not parse passed tests"
                grep -o 'failed="[^"]*"' "$file" | head -1 || echo "Could not parse failed tests"
                echo "---"
              fi
            done
          else
            echo "No test result files found."
          fi
          
          echo ""
          echo "=== Code Coverage Summary ==="
          if [ -f "./coverage-results/html/Summary.txt" ]; then
            echo "Coverage summary:"
            cat ./coverage-results/html/Summary.txt
          else
            echo "No coverage summary found."
          fi
          
          echo ""
          echo "=== Coverage Files Generated ==="
          if [ -d "./coverage-results" ]; then
            echo "Coverage files:"
            find ./coverage-results -type f -name "*.xml" -o -name "*.json" -o -name "*.html" | head -20
          fi

      - name: Run Complexity Analysis
        if: always()
        run: |
          echo "üîç Running Cyclomatic Complexity Analysis..."
          chmod +x ./test/complexity-simple.sh
          ./test/complexity-simple.sh > complexity-results.txt 2>&1
          
          echo "üìä Complexity Analysis Results:"
          cat complexity-results.txt
          
          # Extract complexity score for main file
          complexity_score=$(grep -A10 "UnifiWebhookEventReceiver.cs" complexity-results.txt | grep "Total complexity:" | grep -o '[0-9]\+' | head -1)
          echo "COMPLEXITY_SCORE=${complexity_score:-0}" >> $GITHUB_ENV
          
          # Create complexity summary file
          echo "${complexity_score:-0}" > complexity_score.txt
          
          # Determine complexity status
          if [ "${complexity_score:-0}" -le 50 ]; then
            echo "COMPLEXITY_STATUS=‚úÖ Low" >> $GITHUB_ENV
            echo "‚úÖ Low" > complexity_status.txt
            echo "‚úÖ" > complexity_icon.txt
          elif [ "${complexity_score:-0}" -le 100 ]; then
            echo "COMPLEXITY_STATUS=‚ö†Ô∏è Moderate" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Moderate" > complexity_status.txt
            echo "‚ö†Ô∏è" > complexity_icon.txt
          else
            echo "COMPLEXITY_STATUS=üî¥ High" >> $GITHUB_ENV
            echo "üî¥ High" > complexity_status.txt
            echo "üî¥" > complexity_icon.txt
          fi

      - name: Upload complexity results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complexity-results
          path: |
            complexity-results.txt
            complexity_score.txt
            complexity_status.txt
            complexity_icon.txt

      - name: Complexity Quality Gate
        if: always()
        run: |
          echo "üéØ Checking complexity quality gate..."
          complexity_score=$(cat complexity_score.txt 2>/dev/null || echo "0")
          
          # Currently set to warning-only (threshold: 200)
          # To enforce stricter limits, lower this threshold and change to exit 1
          if [ "${complexity_score}" -gt 200 ]; then
            echo "‚ö†Ô∏è WARNING: Complexity score ${complexity_score} exceeds recommended threshold of 200"
            echo "Consider refactoring to improve maintainability"
            # Uncomment the next line to fail the build on high complexity:
            # exit 1
          else
            echo "‚úÖ Complexity score ${complexity_score} is within acceptable limits"
          fi

      - name: API Regression Test Summary
        if: always()
        run: |
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "‚úÖ All unit tests passed! Deployment can proceed."
            echo "TEST_STATUS=passed" >> $GITHUB_ENV
            
            # Extract and display key coverage metrics
            if [ -f "./coverage-results/html/Summary.json" ]; then
              echo "üìä Extracting coverage metrics..."
              python3 << 'EOF'
          import json
          import sys
          try:
              with open('./coverage-results/html/Summary.json', 'r') as f:
                  data = json.load(f)
              
              line_coverage = data['summary']['linecoverage']
              branch_coverage = data['summary']['branchcoverage'] 
              method_coverage = data['summary']['methodcoverage']
              
              print(f'üìà Line Coverage: {line_coverage:.1f}%')
              print(f'üåø Branch Coverage: {branch_coverage:.1f}%') 
              print(f'üîß Method Coverage: {method_coverage:.1f}%')
              
              # Set coverage as output for other steps
              with open('coverage_summary.txt', 'w') as f:
                  f.write(f'Line: {line_coverage:.1f}% | Branch: {branch_coverage:.1f}% | Method: {method_coverage:.1f}%')
                  
          except Exception as e:
              print(f'Could not parse coverage: {e}')
              sys.exit(0)
          EOF
            fi
            
            # Display quality metrics summary
            echo ""
            echo "üìã Quality Metrics Summary:"
            echo "=========================="
            echo "${COMPLEXITY_ICON} Complexity Score: ${COMPLEXITY_SCORE} (${COMPLEXITY_STATUS})"
            if [ -f "coverage_summary.txt" ]; then
              echo "üìä Coverage: $(cat coverage_summary.txt)"
            fi
          else
            echo "‚ùå Unit tests failed! Deployment will be skipped."
            echo "TEST_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Publish
        if: steps.test.outcome == 'success'
        run: dotnet publish UnifiWebhookEventReceiver.csproj --configuration Release --output ./publish

      - name: Upload published files
        if: steps.test.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish
      
      - name: Zip Lambda package
        if: steps.test.outcome == 'success'
        run: |
          cd publish
          zip -r ../lambda.zip .
          cd ..

      - name: Configure AWS credentials (OIDC)
        if: steps.test.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.OIDC_ROLE_NAME }}
          aws-region: us-east-1
          
      - name: Upload Lambda package to S3
        if: steps.test.outcome == 'success'
        run: |
          aws s3 cp lambda.zip s3://${{ steps.env.outputs.BUCKET_DEPLOYMENT }}/${{ steps.env.outputs.S3_KEY_PREFIX }}/publish.zip

  # Deploy job: Deploys the CloudFormation stack and updates Lambda function code
  # Only runs if the build job (including tests) completes successfully
  deploy:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      OIDC_ROLE_NAME: ${{ vars.OIDC_ROLE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV_PREFIX=prod" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-prod-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-prod-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-prod-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-prod-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "DOMAIN_NAME=${{ vars.PROD_DOMAIN_NAME }}" >> $GITHUB_OUTPUT
            echo "UNIFI_HOST=${{ secrets.PROD_UNIFI_HOST }}" >> $GITHUB_OUTPUT
            echo "HOSTED_ZONE_ID=${{ vars.HOSTED_ZONE_ID }}" >> $GITHUB_OUTPUT
          else
            echo "ENV_PREFIX=dev" >> $GITHUB_OUTPUT
            echo "STACK_NAME=bf-dev-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "BUCKET_DEPLOYMENT=bf-dev-s3-deployments" >> $GITHUB_OUTPUT
            echo "BUCKET_STORAGE=bf-dev-s3-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "LAMBDA_NAME=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "S3_KEY_PREFIX=bf-dev-lambda-unifi-protect-event-backup-api" >> $GITHUB_OUTPUT
            echo "DOMAIN_NAME=${{ vars.DEV_DOMAIN_NAME }}" >> $GITHUB_OUTPUT
            echo "UNIFI_HOST=${{ secrets.DEV_UNIFI_HOST }}" >> $GITHUB_OUTPUT
            echo "HOSTED_ZONE_ID=${{ vars.HOSTED_ZONE_ID }}" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to environment: $ENV_PREFIX"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.OIDC_ROLE_NAME }}
          aws-region: us-east-1

      - name: Package summary event lambda
        run: |
          cd summary-event-lambda
          npm install --omit=dev
          cp src/index.js .
          zip -r ../bf-${{ steps.env.outputs.ENV_PREFIX }}-summary-event-lambda.zip index.js package.json
          cd ..

      - name: Upload summary lambda package to S3
        run: |
          aws s3 cp bf-${{ steps.env.outputs.ENV_PREFIX }}-summary-event-lambda.zip s3://${{ steps.env.outputs.BUCKET_DEPLOYMENT }}/bf-${{ steps.env.outputs.ENV_PREFIX }}-lambda-unifi-protect-event-backup-api-summary/bf-${{ steps.env.outputs.ENV_PREFIX }}-summary-event-lambda.zip

      - name: Generate build timestamp
        id: timestamp
        run: echo "BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file templates/cf-stack-cs.yaml \
            --stack-name ${{ steps.env.outputs.STACK_NAME }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              OwnerName="${{ vars.OWNER_NAME }}" \
              AppName="${{ vars.APP_NAME }}" \
              SupportEmail="${{ vars.SUPPORT_EMAIL }}" \
              AppDescription="${{ vars.APP_DESCRIPTION }}" \
              EnvPrefix="${{ steps.env.outputs.ENV_PREFIX }}" \
              BucketName="${{ steps.env.outputs.BUCKET_STORAGE }}" \
              BucketNameDeployment="${{ steps.env.outputs.BUCKET_DEPLOYMENT }}" \
              FunctionName="${{ steps.env.outputs.LAMBDA_NAME }}" \
              RoleName="${{ steps.env.outputs.LAMBDA_NAME }}-role" \
              UnifiHost="${{ steps.env.outputs.UNIFI_HOST }}" \
              UnifiHostIp="${{ secrets.UNIFI_HOST_IP }}" \
              UnifiUsername="${{ secrets.UNIFI_USERNAME }}" \
              UnifiPassword="${{ secrets.UNIFI_PASSWORD }}" \
              UnifiApiKey="${{ secrets.UNIFI_API_KEY }}" \
              UnifiApiMetadataPath="${{ secrets.UNIFI_API_METADATA_PATH }}" \
              DeviceMetadata='${{ vars.DEVICE_METADATA }}' \
              DomainName="${{ steps.env.outputs.DOMAIN_NAME }}" \
              HostedZoneId="${{ steps.env.outputs.HOSTED_ZONE_ID }}" \
              BuildSha="${{ github.sha }}" \
              BuildTimestamp="${{ steps.timestamp.outputs.BUILD_TIMESTAMP }}" \
              RetentionDays=${{ vars.MAX_RETENTION_DAYS }} \
              UiApiKey="${{ secrets.UI_API_KEY }}" \
            --tags \
              Owner="${{ vars.OWNER_NAME }}" \
              AppName="${{ vars.APP_NAME }}" \
              Description="${{ vars.APP_DESCRIPTION }}" \
              Environment="${{ steps.env.outputs.ENV_PREFIX }}"

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.env.outputs.LAMBDA_NAME }} \
            --s3-bucket ${{ steps.env.outputs.BUCKET_DEPLOYMENT }} \
            --s3-key ${{ steps.env.outputs.S3_KEY_PREFIX }}/publish.zip

      - name: Update Summary Event Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name bf-${{ steps.env.outputs.ENV_PREFIX }}-lambda-unifi-protect-event-backup-api-summary \
            --s3-bucket ${{ steps.env.outputs.BUCKET_DEPLOYMENT }} \
            --s3-key bf-${{ steps.env.outputs.ENV_PREFIX }}-lambda-unifi-protect-event-backup-api-summary/bf-${{ steps.env.outputs.ENV_PREFIX }}-summary-event-lambda.zip

      # Create UI API Gateway API key and attach to usage plan (post-stack)
      - name: Create UI API Gateway API Key and attach to Usage Plan
        env:
          DEV_UI_API_KEY: ${{ secrets.DEV_UI_API_KEY }}
          PROD_UI_API_KEY: ${{ secrets.PROD_UI_API_KEY }}
        run: |
          # Select the correct UI API key based on environment
          if [ "${{ steps.env.outputs.ENV_PREFIX }}" = "prod" ]; then
            UI_API_KEY="$PROD_UI_API_KEY"
          else
            UI_API_KEY="$DEV_UI_API_KEY"
          fi
          set -e
          echo "Creating UI API Gateway API Key with user-supplied value..."
          # Get the RestApiId and StageName from stack outputs
          REST_API_ID=$(aws cloudformation describe-stacks --stack-name ${{ steps.env.outputs.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ApiGateway'].OutputValue" --output text)
          USAGE_PLAN_ID=$(aws cloudformation describe-stacks --stack-name ${{ steps.env.outputs.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='UsagePlan'].OutputValue" --output text)
          if [ -z "$USAGE_PLAN_ID" ]; then
            # Fallback: get UsagePlanId by name
            USAGE_PLAN_ID=$(aws apigateway get-usage-plans --query "items[?usagePlanName=='${{ steps.env.outputs.LAMBDA_NAME }}-plan'].id" --output text)
          fi
          if [ -z "$USAGE_PLAN_ID" ]; then
            echo "::error::Could not determine UsagePlanId."
            exit 1
          fi
          # Create or update the API key with the user-supplied value
          API_KEY_ID=$(aws apigateway get-api-keys --name-query "${{ steps.env.outputs.LAMBDA_NAME }}-UiApiKey" --include-values --query "items[?name=='${{ steps.env.outputs.LAMBDA_NAME }}-UiApiKey'].id" --output text)
          if [ -n "$API_KEY_ID" ]; then
            echo "API key already exists: $API_KEY_ID. Deleting to update value."
            aws apigateway delete-api-key --api-key "$API_KEY_ID"
          fi
          # Create and associate the API key with the usage plan
          echo "Creating UI API key and associating with usage plan..."
          API_KEY_ID=$(aws apigateway create-api-key --name "${{ steps.env.outputs.LAMBDA_NAME }}-UiApiKey" --description "API Key for UI access (user-supplied)" --enabled --value "$UI_API_KEY" --query 'id' --output text)
          echo "Created new API key: $API_KEY_ID"
          # Associate the API key with the usage plan, handle if already associated
          set +e
          aws apigateway create-usage-plan-key --usage-plan-id "$USAGE_PLAN_ID" --key-type API_KEY --key-id "$API_KEY_ID"
          if [ $? -ne 0 ]; then
            echo "Usage plan key may already exist, checking..."
            EXISTING=$(aws apigateway get-usage-plan-keys --usage-plan-id "$USAGE_PLAN_ID" --query "items[?keyId=='$API_KEY_ID'] | [0]" --output json)
            if [ "$EXISTING" != "null" ]; then
              echo "API key is already associated with the usage plan."
            else
              echo "::error::Failed to associate API key with usage plan."
              exit 1
            fi
          fi
          set -e
